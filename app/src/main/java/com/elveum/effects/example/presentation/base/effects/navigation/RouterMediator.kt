package com.elveum.effects.example.presentation.base.effects.navigation

import com.elveum.effects.core.v2.CommandExecutor
import com.elveum.effects.core.v2.EffectCleaner
import com.elveum.effects.core.v2.EffectController
import com.elveum.effects.core.v2.EffectRecord
import com.elveum.effects.core.v2.ObservableResourceStore
import com.elveum.effects.core.v2.impl.CommandExecutorImpl
import com.elveum.effects.core.v2.impl.EffectCleanerImpl
import com.elveum.effects.core.v2.impl.EffectControllerImpl
import com.elveum.effects.core.v2.impl.ObservableResourceStoreImpl
import com.elveum.effects.example.domain.Cat
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.components.ActivityRetainedComponent
import dagger.hilt.android.scopes.ActivityRetainedScoped
import dagger.multibindings.IntoSet
import javax.inject.Provider

// --- AUTOGENERATED

class RouterMediator(
    private val commandExecutor: CommandExecutor<ComposeRouter>,
) : Router {
    override fun launchDetails(cat: Cat) {
        commandExecutor.execute { it.launchDetails(cat) }
    }

    override fun goBack() {
        commandExecutor.execute { it.goBack() }
    }
}


@Module
@InstallIn(ActivityRetainedComponent::class)
object RouterModule {

    @Provides
    @ActivityRetainedScoped
    fun provideStore(): ObservableResourceStore<ComposeRouter> {
        return ObservableResourceStoreImpl()
    }

    @Provides
    fun provideCommandExecutor(resourceStore: ObservableResourceStore<ComposeRouter>): CommandExecutor<ComposeRouter> {
        return CommandExecutorImpl(resourceStore)
    }

    @Provides
    fun provideMediator(commandExecutor: CommandExecutor<ComposeRouter>): Router {
        return RouterMediator(commandExecutor)
    }

    @Provides
    fun provideImplController(
        observableResourceStore: ObservableResourceStore<ComposeRouter>
    ): EffectController<ComposeRouter> {
        return EffectControllerImpl(observableResourceStore)
    }

    @Provides
    fun provideController(
        controller: EffectController<ComposeRouter>
    ): EffectController<Router> {
        @Suppress("UNCHECKED_CAST")
        return controller as EffectController<Router>
    }

    @Provides
    fun provideCleaner(
        cleaner: EffectCleaner<ComposeRouter>
    ): EffectCleaner<Router> {
        @Suppress("UNCHECKED_CAST")
        return cleaner as EffectCleaner<Router>
    }

    @Provides
    fun provideImplCleaner(
        observableResourceStore: ObservableResourceStore<ComposeRouter>,
    ): EffectCleaner<ComposeRouter> {
        return EffectCleanerImpl(observableResourceStore)
    }

    @Provides
    @IntoSet
    fun provideEffectRecord(
        controllerProvider: Provider<EffectController<ComposeRouter>>,
    ): EffectRecord {
        return EffectRecord(
            effectImplementationClass = ComposeRouter::class,
            effectInterfaceClass = Router::class,
            controllerProvider = { controllerProvider.get() },
        )
    }

}
