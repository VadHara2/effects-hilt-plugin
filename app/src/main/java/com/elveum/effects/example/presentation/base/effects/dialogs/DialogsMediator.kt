package com.elveum.effects.example.presentation.base.effects.dialogs

import com.elveum.effects.core.v2.CommandExecutor
import com.elveum.effects.core.v2.EffectCleaner
import com.elveum.effects.core.v2.EffectController
import com.elveum.effects.core.v2.EffectRecord
import com.elveum.effects.core.v2.ObservableResourceStore
import com.elveum.effects.core.v2.impl.CommandExecutorImpl
import com.elveum.effects.core.v2.impl.EffectCleanerImpl
import com.elveum.effects.core.v2.impl.EffectControllerImpl
import com.elveum.effects.core.v2.impl.ObservableResourceStoreImpl
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.components.ActivityRetainedComponent
import dagger.hilt.android.scopes.ActivityRetainedScoped
import dagger.multibindings.IntoSet
import javax.inject.Provider

// -- AUTOGENERATED

class DialogsMediator(
    private val commandExecutor: CommandExecutor<ComposeDialogs>
) : Dialogs {
    override suspend fun showAlertDialog(config: AlertDialogConfig): Boolean {
        return commandExecutor.executeCoroutine {
            it.showAlertDialog(config)
        }
    }

    override fun toast(message: String) {
        commandExecutor.execute { it.toast(message) }
    }
}

@Module
@InstallIn(ActivityRetainedComponent::class)
object DialogsModule {

    @Provides
    @ActivityRetainedScoped
    fun provideStore(): ObservableResourceStore<ComposeDialogs> {
        return ObservableResourceStoreImpl()
    }

    @Provides
    fun provideCommandExecutor(resourceStore: ObservableResourceStore<ComposeDialogs>): CommandExecutor<ComposeDialogs> {
        return CommandExecutorImpl(resourceStore)
    }

    @Provides
    fun provideMediator(commandExecutor: CommandExecutor<ComposeDialogs>): Dialogs {
        return DialogsMediator(commandExecutor)
    }

    @Provides
    fun provideImplController(
        observableResourceStore: ObservableResourceStore<ComposeDialogs>
    ): EffectController<ComposeDialogs> {
        return EffectControllerImpl(observableResourceStore)
    }

    @Provides
    fun provideController(
        controller: EffectController<ComposeDialogs>
    ): EffectController<Dialogs> {
        @Suppress("UNCHECKED_CAST")
        return controller as EffectController<Dialogs>
    }

    @Provides
    fun provideCleaner(
        cleaner: EffectCleaner<ComposeDialogs>
    ): EffectCleaner<Dialogs> {
        @Suppress("UNCHECKED_CAST")
        return cleaner as EffectCleaner<Dialogs>
    }

    @Provides
    fun provideImplCleaner(
        observableResourceStore: ObservableResourceStore<ComposeDialogs>,
    ): EffectCleaner<ComposeDialogs> {
        return EffectCleanerImpl(observableResourceStore)
    }

    @Provides
    @IntoSet
    fun provideEffectRecord(
        controllerProvider: Provider<EffectController<ComposeDialogs>>,
    ): EffectRecord {
        return EffectRecord(
            effectImplementationClass = ComposeDialogs::class,
            effectInterfaceClass = Dialogs::class,
            controllerProvider = { controllerProvider.get() },
        )
    }

}
