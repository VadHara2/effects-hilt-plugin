%PACKAGE_STATEMENT%

import com.elveum.effects.core.v2.CommandExecutor
import com.elveum.effects.core.v2.EffectCleaner
import com.elveum.effects.core.v2.EffectController
import com.elveum.effects.core.v2.EffectRecord
import com.elveum.effects.core.v2.ObservableResourceStore
import com.elveum.effects.core.v2.impl.CommandExecutorImpl
import com.elveum.effects.core.v2.impl.EffectCleanerImpl
import com.elveum.effects.core.v2.impl.EffectControllerImpl
import com.elveum.effects.core.v2.impl.ObservableResourceStoreImpl
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.multibindings.IntoSet
import javax.inject.Provider
import %HILT_COMPONENT%
import %HILT_SCOPE%

@Module
@InstallIn(%HILT_COMPONENT_NAME%::class)
object %TARGET_INTERFACE_NAME%Module {

    @Provides
    @%HILT_SCOPE_NAME%
    fun provideStore(): ObservableResourceStore<%EFFECT_IMPL_NAME%> {
        return ObservableResourceStoreImpl()
    }

    @Provides
    fun provideCommandExecutor(resourceStore: ObservableResourceStore<%EFFECT_IMPL_NAME%>): CommandExecutor<%EFFECT_IMPL_NAME%> {
        return CommandExecutorImpl(resourceStore)
    }

    @Provides
    fun provideMediator(commandExecutor: CommandExecutor<%EFFECT_IMPL_NAME%>): %TARGET_INTERFACE_NAME% {
        return %MEDIATOR_NAME%(commandExecutor)
    }

    @Provides
    fun provideImplController(
        observableResourceStore: ObservableResourceStore<%EFFECT_IMPL_NAME%>
    ): EffectController<%EFFECT_IMPL_NAME%> {
        return EffectControllerImpl(observableResourceStore)
    }

    @Provides
    fun provideController(
        controller: EffectController<%EFFECT_IMPL_NAME%>
    ): EffectController<%TARGET_INTERFACE_NAME%> {
        @Suppress("UNCHECKED_CAST")
        return controller as EffectController<%TARGET_INTERFACE_NAME%>
    }

    @Provides
    fun provideCleaner(
        cleaner: EffectCleaner<%EFFECT_IMPL_NAME%>
    ): EffectCleaner<%TARGET_INTERFACE_NAME%> {
        @Suppress("UNCHECKED_CAST")
        return cleaner as EffectCleaner<%TARGET_INTERFACE_NAME%>
    }

    @Provides
    fun provideImplCleaner(
        observableResourceStore: ObservableResourceStore<%EFFECT_IMPL_NAME%>,
    ): EffectCleaner<%EFFECT_IMPL_NAME%> {
        return EffectCleanerImpl(observableResourceStore)
    }

    @Provides
    @IntoSet
    fun provideEffectRecord(
        controllerProvider: Provider<EffectController<%EFFECT_IMPL_NAME%>>,
    ): EffectRecord {
        return EffectRecord(
            effectImplementationClass = %EFFECT_IMPL_NAME%::class,
            effectInterfaceClass = %TARGET_INTERFACE_NAME%::class,
            controllerProvider = { controllerProvider.get() },
        )
    }

}
